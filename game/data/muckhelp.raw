~~title MUCK Reference Manual for FBMuck 6.00
~~author Revar Desmera <revar@belfry.com>
~~doccmd help
~~sectlist
~~secttopics
~~index
~~file info/muckhelp
~
~~section Basics|Basics
~
~
~
begin
Welcome to NeverDark.

  This is a fork of fbmuck, which is GPL'd work. I've worked on a noise
algorithm before this, and this is an attempt to share it, as a sort of
online CV experience. I've always delayed sharing the code because of my
deep, deep shame.

  So I just keep working on it, how much do I mean this? Well, I've made
this in a way u hopefully don't notice when I build.

  Room positions are 3D, but terrain is 2D. How big is the world?
2^16. Is there only one? No. 2^16. How many biomes? Actually 13,
counting with Jesus. Gots some combat, spells, bufs, etc.

  It is quite pre-alpha but I'll keep working on it when I can.

  Check out the code at https://github.com/tty-pt/neverdark

  I have removed the @ from all commands.

Thanks and have fun.
Q

~~alsosee startingout,walking,look,kill

~
~
say
"<message>
SAY <message>

  Says <message> out loud to everyone in the room.  If your name is Igor,
and you typed '"Hello everyone!', you will see 'You say, "Hello everyone!"'
and everyone else in the room will see 'Igor says, "Hello everyone!"'
~~alsosee pose,whisper,page
~
~
pose
:<message>
POSE <message>

  Poses a message to everyone in the room.  This is used for actions.  Ie:
if your name was Igor, and you typed ':falls down.', everyone would see
~~code
    Igor falls down.
~~endcode
~~alsosee say,whisper,page
~
~
whisper
WHISPER <player>=<message>

  Whispers the message to the named person, if they are in the same room
as you.  No one else can see the message.  Wizards can use the form
'whisper *<player>=<message>' to whisper to players in other rooms.
  Note: Most systems use a MUF program with a global 'whisper' action, which
takes the place of the built-in 'whisper' command, and has more features.
~~alsosee say,pose,page
~
~
look|read
LOOK <object>

  Looks around at the current room, or at <object> if specified.
For players, displays their description and inventory, for things,
their description, and for rooms, their name, description, succ/fail
message, and contents.  Also triggers osucc/ofail messages on rooms.
Programs are triggered accordingly on desc/succ/fail fields.
~
~
inventory
INVENTORY

  Lists what you are carrying. This can usually be abbreviated to inv or i.
~
~
get|take
GET <object>
GET <container>=<object>

  Attempts to pick up <object> in the first form.  The lock on <object> is
checked for a success (true), and the normal path of success/fail is then
taken.  On success the object is placed in your inventory.
  
  In the second form, attempts to get <object> from the given <container>.
The _/clk lock property on <container> is tested, and if it is true, then
it checks to see if the standard _/lok lock property on <object> tests true.
If both locks pass, then <object> is moved into the player's inventory.
If there is no _/clk property on <container> it defaults to failing.
The _/lok property, on <object>, on the other hand, defaults to passing.
@succ/@fail messages are not displayed, when fetching something from a
container.

  TAKE can also be used instead of GET.
~~alsosee success,failure,@lock,put,drop
~
~
put|throw
PUT <thing>=<container>

  Attempts to put <thing> into the given <container>.  The _/clk lock
property on <container> is tested, and if it is true, then it checks
to see if the standard _/lok lock property on <thing> tests true.
If both locks pass, then <thing> is moved from the player's inventory
into the given container.  If there is no _/clk property on <container>
it defaults to failing.  The _/lok property, on <thing>, on the other
hand, defaults to passing.  @succ/@fail messages are not displayed,
when putting something into a container.

  You can also put programs in containers, much the same as you can with
things.  Throw and put can be used instead of drop.
~~alsosee @drop,@odrop,@lock,STICKY,DROP-TO,get,drop
~
~
drop
DROP <thing>

  Drops the <thing> if you are holding it.  It moves the thing to the room
you are in, unless the thing's STICKY flag is set, or the room has a
drop-to.

  If the thing's STICKY flag is set, it will go home when dropped.

  If the room's drop-to is set, and the room has it's STICKY flag set,
then the thing will stick around in the room until all players have left.
If the room is not set sticky, then the thing will be sent to the location
given by the room's drop-to.

  You can also drop programs, much like things, but they are not affected
by room droptos or STICKY flags.

  An '@drop' message can be set which will be shown to the player dropping
the object, and an '@odrop' message can be set, which will be shown to the
other players in the room.  Throw and put can be used instead of drop.
~~alsosee @drop,@odrop,@lock,STICKY,DROP-TO,get,put
~
~
home
HOME

  Sends you home, no matter where you are. You retain your pennies, but
any objects you are carrying leave your inventory and return to their own
homes. See HOMES.
~
~
give
GIVE <player|object>=<amount>

  Gives <amount> pennies from your supply to <player>.  Mortals may only
give positive amounts and may not cause a player to have more than 10000
pennies.  Wizards do not affect their penny supplies by giving to others,
and may also give pennies to objects, changing that object's value.
~
~
rob
ROB <player>
  Attempts to steal one penny from <player>. The only thing you can rob
are pennies.
~~alsosee robbery
~
~
robbery
Robbery:

  When you rob someone, you succeed or fail to use them.  You can protect
yourself from being robbed by entering "@lock me=me". If you lock yourself
to yourself, you can rob yourself and set off your @success and @osuccess
messages.

~~alsosee rob,success,failure,@lock
~
~
train
train <char>[...]=<number>

  Trains a stat <number> times.

<char> may be: (s)trength, (c)onstitution, (d)exterity,
(i)ntelligence or (w)izdom.

~~alsosee kill
~
~
equip
equip <name>

  Equip item.

~~alsosee unequip,kill,status,select
~
~
unequip
unequip <char>

  Unequip item worn on bodypart denoted by <char>, which
can be any of the following:

  (h)ead, (n)eck, (c)hest, (b)ack, (w)eapon,
  (l)eft finger, (r)ight finger or (g)rieves.

~~alsosee equip,kill,status
~
~
status
status

  Shows you your hp, mp, dmg, def, mdef, active debuf mask, etc.

~~alsosee kill
~
~
c|cast
c<number>

  Casts the spell in the <number> slot.

~~alsosee spells,walk,kill,combo
~
~
0|combo
<number>

  Each living thing has a list of 8 (0-7) spells it can use during combat,
and also a mask that indicates which of those spells will be attempted
during the next turns. This is called the combo.

  For example, if you have Fireball in spell slot 0, and you type in "1",
Fireball will be cast next turn, as long as you have enough mana. If you
have "Fire Focus" in slot 2 and you type in "5", you select both spells.

~~alsosee kill,walk
~
~
select
select <number>

  Selects <number> as the index to match in the next list match operation.

~~alsosee get,equip,unequip,sell,buy,look
~
~
examine
EXAMINE <object>[=proppattern]
  
  If you do not control <object>, it prints the owner of the object.
  
  If you control <object>, examine will give you a complete breakdown of
all standard fields, flags, etc that are associated with the object.
MPI in the the displayed fields will be shown raw, without executing it.
  
  If the optional proppattern field is supplied, then it instead lists
out all the properties that matches the given wildcard pattern.  If the
pattern ends with '/' then all the sub-properties in the matching propdirs
will be listed.  If the pattern ends with **, then all sub-propdirs of
the matching properties will be shown recursively.
  
~~code
  ex obj=/        list all root properties on obj.
  ex obj=/**      list ALL properties on obj.
  ex obj=foo/     list all properties in the foo propdir on obj.
  ex obj=foo/**   list all props in the foo/ propdir, and all contained dirs.
  ex obj=foo*bar  list root props whose name start with foo and end with bar.
~~endcode
~~alsosee propdirs,propdirs-example
~
~
help
HELP [<subject>]

  With no arguments, this command returns a brief summary of basic
commands on playing the game. When <subject> is specified, it returns
detailed informaion on that topic.  Lists of topics are available by
typing 'help category', or 'help alpha'.  Seeing as you are reading this,
you probably already understand how this works.
~
~
walk|walking
Walking
[<number>]<direction>

  Moves you in the specified direction. They are:

Dir	Keys

West	  h
South	  j
North	n k
East	e l
Up	u K
Down	  J

  For example, if you wanted to move north you could just type "n", or
if you wanted to move 2 tiles north and 1 east, you could type "2ne".

  Some characters are missing from the table, right?

  Though you can still type "west" or "down" to move in these directions,
It must be followed by return / enter, and not have anything preceding it.

  This is because these characters are reserved for other operations.
These, like walking, and contrary to other commands, can be typed
one after the other. Just like in VI's NORMAL MODE.
You can learn more about them in the help pages listed below.

~~alsosee dir,geo,kill
~
~
dir|directional|dir_op|dir op
<op>[<number>]<direction>

  The available operations are r, R, d, D, w and W.

  For example, you can make a door to your north by typing "dn",
or make two parallel doors to your north with "d2n".

~~alsosee r,R,d,D,w,W,walking,geo,kill
~
~
r
r[<number>]<direction>

  Takes a room from Gaia, into your possession (-80p).

~~alsosee R,name,describe
~
~
R
R[<number>]<direction>

~~Returns the room in that direction to Gaia (+80p).

~~alsosee r
~
~
d
d[<number>]<direction>

  Creates a door in the specified direction, claiming any rooms necessary.

~~alsosee D,r
~
~
D
D[<number>]<direction>

  Removes the door from the geographical exit in the specified direction.

~~alsosee d,r
~
~
w
w[<number>]<direction>

  Turns an geographical exit into a wall, claiming any rooms necessary.

~~alsosee W,r
~
~
W
W[<number>]<direction>

  Restores a geographical exit in the specified direction, claiming
any rooms necessary.

~~alsosee w,r
~
~
geo|geographical|geo ops|geo_ops
Geographical commands.

  These are commands that have to do with geography but do not follow
the conventions of directional commands.

  For example, you can see your current position by typing t.

~~alsosee t,T,x,X,m,",#,dir,kill
~
~
t
t

  Shows you your position in the world.

~~alsosee T
~
~
T
T[y[,x[,z[,extra]]]]

  Teleports you to a position in the universe.
Where y, x and z are your position in the world, and extra is
what world you are in.

~~alsosee t
~
~
x
x (*)

  Shows you the morton number of your position.

~~alsosee X
~
~
X
X[<number>] (*)

  Teleports you to a position in the universe.

~~alsosee x
~
~
m
m<char>

  Marks the current position as <char>.

~~alsosee "
~
~
"
"<char>	(*)

  Restores you to the position stored in <char>.

~~alsosee m
~
~
#
#<number> (*)

  Transports the room with the specified id
to the current geographical position.
~
~
types
Object Types:

  There are 5 types of objects:
Players are the objects users log in as; their avatars.
Things are objects that can be carried, or that can sit about a room.
Rooms are locations that contain players and things and linked exits.
Exits are the means by which players move between rooms.
Programs are player-written extensions to the game.

  The first letter following an object's ID number indicates the type:
P(layer), E(xit), F(orth program), or R(oom).  Otherwise it's a Thing.
~
~
objectmatching|object_matching|object matching
Referring to Objects:

  You can specify objects (things, players, exits, and rooms) by name if
they're in your inventory or in the same room as you. You need only type
enough letters of the name to be unambiguous. You can also specify objects
anywhere by their DBRef, in the form #<dbrefnumber>. Players in other rooms
may be specified in the form *<player name>. The keywords 'me' can be used
for yourself, and 'here' for the room you're in.

  Each object has an ID number (the 'dbref'), which appears after the
name of the object, and is followed by any flags on the object; Ie:
Foo(#3672PB) is a Player, named Foo, set BUILDER.  The number is a
database reference, and is used to specify objects at a distance;
Ie. 'examine #3672'. You will only see the ID number of objects you
own, or which are set LINK_OK, ABODE, or CHOWN_OK. Wizards can see the
numbers and flags on all objects.
~~alsosee flags,types,ABODE,CHOWN_OK,LINK_OK
~
~
control
Control:

There are 3 rules to controlling objects:
~~code
  1) You control anything you own.
  2) A wizard or God controls everything.
  3) If Realms_Control is @tuned on in the server, then if a player owns an
     environmental room, and that room has it's Wizard bit set, then the owner
     of that environment room has control over anything contained in that env-
     ironment room.  This includes things inside of rooms that are inside of
     that environment room, and so forth.  Everything in that Wizbit environ-
     ment can be controlled by the environment's owner. 
~~endcode
  
There are a few things to keep in mind, in relation to the above:
~~code
  a) Anybody can @chown an unlinked exit to themselves, even if it is locked.
     Builders should beware of this, lest their exits be linked or stolen.
     Once the object has been chowned, then it will be controlled by the
     owner, as per rule 1.
  b) Players can @chown to themselves any exits which are linked to an object
     they own.  Note Rule #1.
  c) Players can @chown to themselves any exits which are attached to an object
     that they own.  Note Rule #1.
  d) If an object is set CHOWN_OK, anyone may "@chown <object>=me" and gain
     ownership and control of the object. (see chown_ok)
~~endcode
~
~
@recycle
@RECYCLE <object>

  Destroy an object and remove all references to it within the database.
The object is then added to a free list, and newly created objects are
assigned from the pool of recycled objects first.  You *must* own the
object being recycled, even wizards must use the @chown command to
recycle someone else's belongings.
~
~
@name
@NAME  <object>=<name> [<password>]

  Sets the name field of <object> to <name>.  A null <name> is illegal.
You must supply <password> if renaming a player.  Wizards can rename
any player but still must include the password.
~
~
@describe|@desc
@DESCRIBE <object> [=<text>]

  Sets the description field of <object> to <text>.  If <text> is not
specified, the description field is cleared.  This is the same as
'@set <object>=_/de:[text]' A description is what is seen when a
player looks at something.
~
~
@idescribe|@idesc
@IDESCRIBE <object> [=<text>]

  Sets the idescription field of <object> to <text>.  If <text> is
not specified, the description field is cleared.  This is the same
as '@set <object>=_/ide:[text]' An idescription is what is seen on
the inside of a vehicle, when a player inside it looks around.
~
~
@success|@succ
@SUCCESS <object> [=<message>]

  Sets the success message for <object>.  The message is displayed when
a player successfully uses <object>.  Without a message argument, it
clears the message. It can be abbreviated @succ.  <object> can be
specified as <name> or #<number>, or as 'me' or 'here'.  This is the
same as '@set <object>=_/sc:[text]'
~~alsosee @osuccess
~
~
@fail
@FAIL <object> [=<message>]

  Sets the fail message for <object>.  The message is displayed when a
player fails the lock check when trying to use <object>.  The <object>
can be a thing, player, exit, or room, specified as <name> or #<number>
or 'me' or 'here'.  Without a message argument, it clears the message.
This is the same as '@set <object>=_/fl:[text]'
~~alsosee @ofail,@desc
~
~
@drop
@DROP <object> [=<text>]

  Sets the drop field of <object> to <text>.  If <text> is not specified,
the drop field is cleared.  The drop message on an object is displayed when
you drop it.  On an exit, it is displayed upon entering the destination
room.  On a player it is displayed to whoever kills them.  On a room, it
is displayed when an object is dropped there.  This is the same as
'@set <object>=_/dr:[text]'
~
~
@osuccess|@osucc
@OSUCCESS <object> [=<message>]

  The @osuccess message, prefixed by the player's name, is shown to others
when the player successfully uses <object>.  Without a message argument,
it clears the @osuccess message. It can be abbreviated @osucc.  <object>
can be specified as <name> or #<number>, or as 'me' or 'here'.  This is
the same as '@set <object>=_/osc:[text]'
~~alsosee @success
~
~
@ofail
@OFAIL <object> [=<message>]

  The @ofail message, prefixed by the player's name, is shown to others
when the player fails to use <object>. Without a message argument, it
clears the message. <object> can be specified as <name> or #<number>, or
as 'me' or 'here'.  This is the same as: '@set <object>=_/ofl:[text]'.
~~alsosee @fail
~
~
@odrop
@ODROP <object> [=<text>]

  Sets the odrop field of <object> to <text>.  If <text> is not specified,
the odrop field is cleared.  Odrop on an object is displayed prefixed
by the player's name when s/he drops that object.  On an exit, it is
displayed upon a player's arrival to the destination room (or the location
of the destination player).  On a player, it is displayed after the
`name killed victim!' message.  On a room, it is displayed when an object
is dropped there, prefixed by the object's name.  This is the same as
'@set <object>=_/odr:[text]'
~~alsosee @drop
~
~
substitutions|pronouns|pronoun_subst|pronoun substitution|%a|%s|%o|%p|%r|%n
Pronoun Substitutions:

  @osuccess, @ofail, and @odrop messages may contain %-substitutions,
which evaluate to gender-specific pronouns if the player's 'sex' property
is set. These substitutions are:
~~code
    %a (absolute)       = Name's, his, hers, its.
    %s (subjective)     = Name, he, she, it.
    %o (objective)      = Name, him, her, it.
    %p (possessive)     = Name's, his, her, its.
    %r (reflexive)      = Name, himself, herself, itself.
    %n (player's name)  = Name.
~~endcode
Capitalized pronouns are also available with %A, %S, %O, %P, and %R.
If you need a '%', use %%.
  
  The naturally supported genders are 'male', 'female', 'neuter', 'herm',
and 'hermaphrodite', with the last two being equivalent, both using the
sie/hir/hirself/hirs pronoun set.
 
This set of supported genders can be extended either on an individual
player, or globally by adding _pronouns/GENDER/%X properties on the
player, or on #0 respectively.  For example, to add support on yourself
for a 'stallion' gender, you would add five properties, one for each
of the %a, %s, %o, %p, and %r pronouns, in the _pronouns/stallion/
propdir.  Ie:
~~code
    @set me=_pronouns/stallion/%a:his
    @set me=_pronouns/stallion/%s:he
    @set me=_pronouns/stallion/%o:him
    @set me=_pronouns/stallion/%p:his
    @set me=_pronouns/stallion/%r:himself
~~endcode

If a shapeshifting player decided that they prefer a different subjective
pronoun for themselve while they were in herm form, they could override it
with something like:
    @set me=_pronouns/herm/%s:shi
This would only override the %s pronoun while their gender was 'herm',
though, meaning that if they shapeshift to male, they only have to change
their 'sex' property, and not tweak their pronouns as well.
  
If a player sets a %a, %s, %o, %p, or %r property on themselve, that value
WILL be used, instead of any matching _pronouns/GENDER/%X property.  This
lets players make quick temporary pronoun fixes, and is also available
for legacy reasons.
  
Ex. '@ofail teapot=burns %p hand on the hot teapot.'
~~alsosee gender
~
~
homes
Homes:

  Every thing or player has a home. This is where things go when they
are sent home, or things with the STICKY flag set go when dropped.
Homes are set with the @link command.  A thing's home defaults to the
room where it was created, if you control that room, or your home.
You can link an exit to send players home (with their inventory) with
~~code
    @link <exit>=home
~~endcode
Drop-tos can also be set to 'home'. @teleport accepts home as an argument,
so you can @teleport things (and players if you are a wizard) to their home.
~~alsosee @teleport,@link,STICKY,drop-tos
~
~
drop-to
Drop-to:

  When the @link command is used on a room, it sets a drop-to location.  Any
object dropped in the room (if it isn't STICKY) will go to that location. If
the room is STICKY, the drop-to will be delayed until the last person in the
room has left.
~
~
@chown
@CHOWN <object> [=<player>]

  Changes the ownership of <object> to <player>, or if no player is given,
to yourself.  If the MUCK is compiled with PLAYER_CHOWN, all players are
allowed to take possession of objects, rooms, and actions, provided the
CHOWN_OK flag is set.  Mortals cannot take ownership of a room unless they
are standing in it, and may not take ownership of an object unless they
are holding it.  Wizards have absolute power over all ownership.
~
~
@chown_lock|@chlock
@CHLOCK <object>=<key>
@CHOWN_LOCK <object>=<key>

  @chown-locks <object> so that only players who pass the given <key> can
@chown it.  Boolean expressions are allowed, using '&' (and), '|' (or),
'!' (not), and parentheses ('(' and ')') for grouping.  To lock to a remote
player, prefix their name with '*' (ex. '*Igor').  A key may be a player,
an object, or 'property:value'.

  Examples:
~~code
    @chlock here=*Igor
    @chlock thingy=*Igor|*JohnDoe|me
	@chlock here=!sex:neuter
    @chlock here=me|((*Igor|*JohnDoe)&sex:male)&!_flight?:yes
~~endcode
~~alsosee @lock,@chown,CHOWN_OK
~
~
@teleport
@TELEPORT <arg1> [=<destination>]

  Moves <arg1> to <destination>, if <destination> is not given, moves you
to <arg1>.  Wizards may teleport anything to anywhere, provided it makes
sense, and mortals are allowed to do two things: teleport rooms to change
their parent fields, and the may teleport things to a room they can link
to, provided they control either the thing or its location.
~
~
@stats
@STATS [<player>]

  For mortal players, returns the highest number in
the database, which includes garbage that has been generated with
@recycle.  For Wizards, gives this number as well as a breakdown of
each type of object: rooms, exits, things, programs, players, and
garbage.  Wizards may also specify <player> which returns a similar
display limited to the possessions of <player>.
~
~
timestamps
Timestamps:

  Every object has a timestamp, which includes the time last used, the
time last modified, the time the object was created, and the number
of times that that object has been used by a player. They are shown by
using EXAMINE. 'Usage' is defined as follows: Players-when they are
connected, Rooms-when entered or 'look'd at, Exits-when invoked (by a
'go' command) or 'look'd at, Things-when 'look'd at or 'take'n/'drop'd,
Programs-when run by a player. Examining an object does not count as
looking at them.
~
~
@find
@FIND [<name>] [= <flags/types> = [<output type>]]

  Searches through the database for items that you control matching <name>.
Players control only objects they own; wizards control all objects, so @find
searches the entire database when they use it.  Because the command is
computationally expensive, this costs 100 pennies.
  
  Flags or types can be specified, to specify that you only want to list
objects that have that flag set, or that are of that type.  You can also
specify to list objects that are NOT of that specific type, or that do
NOT have that flag.  (A "!" before the modifier indicates that it is to
be inverted.)
  
The flags that you can specify are:  (use the initial capitalized letter only)
  Abode, Builder/Block, Chown_ok, Dark/Debug, Haven, Interactive, Jump_ok,
  Kill_ok, Link_ok, Mucker, Quell, Sticky/Silent, Vehicle, Wizard, Xforcible,
  and Zombie.
  
You can also specify Mucker Levels by the level number: 1, 2, 3, or 4.
  
The types that you can specify are: (use the capitalized letter only)
  Exit, muF program, Garbage, Player, Room, and Thing.
  
There are a few other modifiers you can specify: (use only initial character)
  Unlinked   will specify that you want to list only unlinked objects.
  @          specifies to list objects longer than about 90 days old.
  ~size      will match all objs whose current memory usage is greater than
               or equal to size bytes.  This must be the last modifier in the
               list of modifiers.
  ^size      will match all objs whose total memory usage, when fully loaded,
               is greater than size bytes.  To do this, it loads the entire
               object into memory from disk.  This modifier is only available
               to wizards.  For regular players, this acts like ~size.  This
               must be the last modifier in the list of modifiers.
  
The output types that can be given are owners, links, size, count, & location.
  (You use the whole name for output type, and you can use only one at a time.)
  owners    lists who owns each object.
  links     shows what each object is linked to, or *UNLINKED*, or, for exits
              linked to multiple things, *METALINK*
  size      displays how much memory is currently being used by an object.  If
              this option is used with the ^ modifier, (see above) then this
              will display the true full size of the object, and not just how
              much is currently being used.
  count     causes nothing to be shown but how many objects the @find/etc would
              match.  ie:  it doesn't display any of the matched objects.
  location  shows where the object is located at.
  
The matching on names is as follows:
        Individual words can be matched as {word1|word2|...}
        Individual characters can be matched as [abc...]
        A ? matches any character.
        A * matches any number of characters, including none.
        Any of these special charcters can be matched by putting a \ before it.
  
Examples of use:
    "@find north = EU = location" will find all of your unlinked exits named
        "north" and print them along with their locations.
    "@find {big|little} = R!L" finds all your rooms whose names contain "big"
        or "little" and are not LINK_OK.
    "@find w[ei]ll" will find everything you control whose name contains "will"
        or "well."
    "@find =E=links" will list all exits that you control, and display where
        they are linked to.
    "@find button==locations" will list all objects you control with 'button'
        in the name, and it will display where thay are located at.
    "@find =~2000=size" will list all your objects whose current memory usage
        is 2000 bytes or more, and it will display their size.
    "@find =^2000=size" will, for a wizard, find all objects in the db that are
        2000 or more bytes in total size, when fully loaded, and it will show
        their sizes.  Note that this will load all of each object into memory
        to make the size determination.  On some systems this can take a while,
        and on all systems this is an abuse to the diskbasing cache.  Only
        Wizards may use this search feature.
  
~~alsosee @owned,@entrances,@contents
~
~
@owned
@OWNED <name> [= <flags/types> = [<output type>]]

  Searches through the database for items that <name> controls.
  
  For an explanation of the flags/types modifiers and the output types,
see the help entry for @FIND.
  
Example:  @owned Revar=F!L3=location
  Will list all Mucker Level 3 (3) programs (F) owned by revar, that are
NOT set Link_OK (!L), and it will show the location of each one.
  
Note that only wizards can do an @owned on other people.
~~alsosee @entrances,@find,@contents
~
~
@contents
@CONTENTS [<object>] [= <flags/types> = [<output type>]]

  Searches the given object for items & exits that match the given flag string.
  
  For an explanation of the flags/types modifiers and the output types, see
the help entry for @FIND.
  
Example:  @contents here=DE=owner
  Will list all Dark Exits who's source is your current location, giving the
owner of each one.
~~alsosee @find,@owned,@entrances
~
~
ABODE
@SET here=A

  If a room is set ABODE, players can set their homes there,
and can set the homes of objects there. (LINK_OK is now used only for exits,
and ABODE is for players and objects.)
  When set on a program, it means AUTOSTART.  This means that when the game
is first started up, the program will automatically be run with a trigger
of #-1 and a 'me @' of the owner of the program.  This is useful to restart
processes that run in the background periodically.
~
~
BUILDER
@SET <thing>=B

  Some mud restrict building commands to players whose builder flag is
set.  The builder flag, BUILDER, is only meaningful for players. On such
systems, only builders can @create, @dig, @link, @open, or take control of
unlinked exits. Only a wizard can set this flag.

  When BUILDER is set on a program, it is called "BOUND" and it causes any
functions within the program to run in preempt mode, regardless of the
multitasking mode that the process had before calling this program.  When
the execution exits this program, the multitasking mode returns to what
it was before the function was called.  This lets libraries of atomic
functions be written.
~
~
CHOWN_OK|COLOR
@SET here=C

  When set on rooms, exit and things, the C flag indicates that any player
may use the @chown command to claim ownership of the item. (see @chown)
When the C flag is set on a player, this indicates that the player wishes
to receive ANSI Color codes from the server.
~
~
DARK
@SET here=D

  If a room is DARK, then when people besides the owner 'look' there, they only
see things they own. If a thing or player is DARK, then "look" does not list
that object in the room's Contents:. Players can set rooms they own dark, and
may also set objects they own dark, but they cannot drop dark objects in rooms
they don't control. Wizards can set players dark.
When a program is set DARK, it is called DEBUG, and a running stack trace is
printed out to any users of the program for each instruction executes.
~
~
flags
The flags are displayed as letters following an object's ID number.
Flags are set with the @set command. The flags are: W(izard), S(ticky),
L(ink_OK), D(ark), J(ump_OK), K(ill_OK), C(hown_OK), H(aven), A(bode),
B(uilder), V(ehicle), Z(ombie), and The flags R(oom), E(xit), and
P(layer) are also used.  Debug is the same flag as Dark, Silent as Sticky,
Color as Chown_OK, and Bound as Builder.  F refers to a Muck Forth program.
An M followed by a 1, 2, or 3 gives the Mucker Level.  (Priority Level for
exits.) See TYPES, GENDER, and individual flag names.
~
~
HAVEN
@SET here=H

  If a room is HAVEN, you cannot kill in that room. If a player is set
HAVEN, he cannot be paged. (see page) HAVEN, when set on a program is
called HARDUID, and causes that program to run with the permissions of
the owner of the trigger, rather than with the permissions of the user
of the program.  When this is set in conjunction with the STICKY (SETUID)
flag on a program, and the program is owned by a wizard, then it will run
with the effective mucker level and permissions of the calling program.
If the caller was not a program, or the current program is NOT owned by
a wizard, then it runs with SETUID permissions.
~
~
JUMP_OK
@SET here=J

  The Jump_OK flag is used in several ways.  Unprivileged programs cannot
use MOVETO on an object unless the player either controls the object, the
room it's being moved from, and the room it's being moved to, or else they
are set Jump_OK.  A player cannot use an action that is linked to another
player unless the other player is set Jump_OK.  On some systems, where
SECURE_TELEPORTing is set up, you cannot use an action to leave a room,
unless the action is either attached to that room, or the room is JUMP_OK.
~
~
KILL_OK
@SET here=K

  On systems where the KILL_OK flag is used, you cannot kill someone unless
both you and they are set Kill_OK.
~
~
KILLING
Getting killed is no big deal. If you are killed, you return to your home,
and all things you carry return to their homes. You also collect 50 pennies
in insurance money (unless you have >= 10000 pennies). See KILL and MONEY.
~
~
LINK_OK
@SET here=L

  If a room is LINK_OK, anyone can link exits to it (but still not from it).
It has no meaning for people, things, or exits. See @LINK in the dictionary.
A program that is link_ok can be called by any other program, and can be run
from actions and propqueues not owned by the owner of the program.
~
~
mucker|mucker levels|nucker|0|1|2|3|ML0|ML1|ML2|ML3|priority levels
Mucker Levels:

  The mucker level of a player or program specifies whether or not a player
can make MUF programs, and what permissions they will have when the programs
are run.  (See 'man mucker levels')  Only a wizard may set the mucker level
of a player, and a normal player may only set the mucker level of programs
they own to less than their current mucker level.  A program cannot be set
to mucker level 0, since it doesn't mean anything.
  
  When the mucker level of an exit is set, is it called the exit's priority
level.  The priority levels let you specify that certain exits are not
overidable by local actions.  When an exit is searched for, in the
matching routines, it will match like it used to, except that if it finds
an exit, later in the search order, that has a higher priority level, it
will choose that exit instead.
  
  You can set the priority level of an exit by setting its Mucker Level.
(ie: @set exit=2)  A level of 0 is the lowest priority, and a level of 3
is the highest priority.  Only a Wizard can set the priority level of an
action or exit.
  
  When the server looks for the standard "connect", "disconnect", or "look"
actions, it will ignore any actions with a priority Level of 0.  When an
action is @attached to another object, @named to something else, or
@unlinked, its Priority Level is reset to 0.
  
  If COMPATIBLE_PRIORITIES is #defined on your system, then exits that are
on room or player objects will never act as if they have an effective
priority level of less than 1.
~
~
QUELL
@SET here=Q

  A wizard set QUELL is effectively a normal player with no wizardly powers.
Programs that test to see if a player is wizard will get a false response
from '"wizard" flag?' when the player is QUELLed.  Wiz-bitted programs
will still act wizbitted whether or not the owner is QUELLED.
~
~
STICKY|SILENT
@SET here=S

  If a thing is STICKY, it goes home when dropped (See HOMES). If a room is
STICKY, its drop-to is delayed until the last person leaves (See DROP-TO).
If a player is STICKY (SILENT), they don't see the dbrefs on things they
own, and they do not see dark objects.  If an exit is linked to a Thing,
and it is located on another Thing, then if the exit is not STICKY, the
Thing the exit is located on will go home when the exit is triggered.  If
a program is STICKY (SETUID) it runs with the permissions of the owner of
the program, not the perms of the user.

  A player can set themselves "SILENT" and not see all the dbrefs and dark
objects that they own.  They won't see objects in a dark room either.
They still control the objects though.  Silent is the same flag as STICKY.
~
~
VEHICLE
@SET <thing>=V

  Objects of TYPE_THING, that have the VEHICLE flag set, can contain
players.  To enter a vehicle, you can either use a MUF program to
teleport you to it via MOVETO, you can get a wizard to @teleport you
into it, or else you an use an action that is both attached and linked
to the vehicle to enter it.  This means that you can only enter a vehicle
from the same room that it is in, and you cannot use far links to enter
it.  This prevents the use of vehicles to get around locks.  Inside the
vehicle, you will see it's @idesc, instead of it's @desc, and you will
not be shown it's @succ or @fail.  Objects dropped in a vehicle will not
go away to the their homes, as a vehicle cannot have a dropto set in it.  
Things with the VEHICLE flag set cannot enter rooms or use exits that
have the VEHICLE flag set.  This allows a way to prevent vehicles from
entering areas where it would be illogical for them to be.
When VEHICLE is set on a program, it is called VIEWABLE, and enables the
program to be @listed.
~
~
WIZARD
@SET <thing>=W

  If a person is WIZARD, they are a wizard, unkillable, subject to fewer
restrictions, and able to use wizard commands. It is only meaningful for
players and programs. In general, WIZARDs can do anything using #<number>
or *<player>.  Only player #1 can set and unset the WIZARD flag of other
players if GOD_PRIV is used.
~
~
ZOMBIE
@SET <thing>=Z

  @force and the FORCE muf primitive can be used on objects of type
THING, if they have the ZOMBIE flag set.  Objects act as if they
have the permissions of their owner.  If an object is locked against
a player, it will also be locked against anything that that player
owns, that tries to test the lock.
  
 Things with the ZOMBIE flag set cannot enter rooms or use exits that
have the ZOMBIE flag set.  This allows a way to prevent zombies from
entering areas where they are not wanted.
  
 If you try to run a program that you control, that has its ZOMBIE flag
set, it will drop you into the MUF debugger.  This lets you step line
by line, or instruction by instruction through a muf program, setting
breakpoints to stop at, and other nice things.  There is help available
within the debugger, via the 'help' command.
~
~
~
~~section Object Properties|PropHelp
~
~
propdirs
Properties are stored in AVL trees, and organized into directories of
  properties.  This speeds things up, and keeps you from being spammed on
  examines.  To examine the properties on an object, use 'ex <obj>=<propdir>'.
  where to examine the base properties in an object, <propdir> would be '/'.
  You can see the value of a single property with 'ex <object>=<propname>'.
      Propdirs are a method of storing and organizing properties to speed
    access and to provide a sort of built-in organization.  The basic idea
    is to make something similar to a 'filesystem' for properties.  In this
    analogy, each person would be a filesystem, with a root directory and
    (theoretically) an infinite number of properties beneath that.
      A property has been expanded with the idea that each property may now
    contain a new property list -- the 'propdir'.  properties can both have
    a value (either integer or string as before) _and_ contain other
    properties.
      The actual directory entries may ALSO contain data.  Propdirs' only
    real 'visible' changes are in the names of properties -- '/' is used as
    the property directory separator, and so will not appear in the names
    of the properties when listed through 'examine' or MUF programs.
      Property protections have also been expanded -- the . and _ may appear
    either at the beginning of the property name or immediately following a
    '/', and that property will have the appropriate protections.  For
    example, the property '/mail/.inbox/mesg/#' would have the same
    protections as '.mesg#' would now.
    There are two ways to remove a property list:
      * First, and most straight forward, is to remove the property that
        contains it.  so, in the previous example, removing the property
        '/mail/.inbox' would (recursively) remove all properties under
        .inbox before removing .inbox itself.
      * The second way is to remove all properties within the property list
        yourself.  When the last property is removed, the parent property
        (the one that contained the property list) is examined to see if
        contains data.  If it does, then the property list only is
        removed.  If the property doesn't contain data then it is removed
        also.
      Because of the first method of removing propdirs, the ability to have a
    property list and value in the same property should be used sparingly.
      If you try to access a property ending in '/', in MUF, it will give a
    programmer error, except in NEXTPROP, in which it will give the name of
    the first property in that propdir.
      The last visible, non-MUF change that propdirs bring is that 'examine'
    will no longer show properties _directly_.  Instead, where the properties
    would normally be shown, it will say:
        "[ Use 'examine <object>=/' to list root properties. ]"
      Examine now can take an argument which is the property or propdir to
    view.  If the property name given ends with a '/', all properties in
    property directory will be listed, otherwise the single property named
    will be shown.
      Internally, a few things changed.  property lists are now stored as AVL
    trees instead of straight lists, so there is a speed increase even if
    propdirs are not directly used.  This also means properties are kept in
    sorted order and will be displayed that way.
      'addprop' will no longer allow a ":" in the property name.
      To clear a propdir's value without deleting the proptree below it,
    from MUF do a '"" 0 addprop' to it.
      A property can *not* have both a string and integer stored at the same
    time anymore.  The old property.c was lax and allowed this, even though
    the integer value would be lost on dbload.
    See also PROPDIRS-EXAMPLE.
~
~
man
MAN [<subject>]

  Displays the programmer's manual or a quick reference.
~
~
@newpassword
@NEWPASSWORD <player> [=<password>]

  Only wizards may use this command.  Changes <player>'s password,
informing <player> that you changed it. Must be typed in full. If
GOD_PRIV was defined, nobody can change god's password.
~
~
@force
@FORCE <player|thing>=<command>

  Causes the game to process <command> as if it were typed by <player|thing>.
If the player or thing being forced is set Xforcible, and its @flock force
lock is set, then anyone (or any zombie) that passed that lock can use @force
on them.  Otherwise only a wizard can use @flock on them.

  With the compile option GOD_PRIV, God cannot be forced by anything except
God owned, wizbit programs.
~
~
@boot
@BOOT <player>

  Disconnects a player from the game.  If a player is connected more than
once it affects the most recent connection. Only a wizard may use this
command.
~
~
@toad
@TOAD <player1> = <player2>

  Only wizards may use this command.  Turns <player1> into a slimy toad,
destroying their character.  All possessions of <player1> are @chowned to
<player2>.  Must be typed in full.
~
~
@bless
@BLESS <obj>=<proppattern>
  
  This is a wizard-only command.
  
  Blesses all properties on <obj> that match the given <proppattern> wildcard
pattern.  The wildcard pattern works similarly to how the examine patterns
work.  ie:

~~code
  @bless obj=/**      blesses ALL properties on obj.
  @bless obj=foo/**   blesses all props in the foo/ propdir, and all propdirs
                       under the foo/ propdir, recursively.
  @bless obj=foo*bar  blesses all root props whose name start with foo and end
                       with bar.
~~endcode

 The @bless command will list all properties that it blesses.

  Blessed properties can execute MPI code with elevated permissions, allowing
scripts that can alter remote objects, and those objects not controlled by
the trigger owner.  Blessed MPI can also use {force} on anyone.

  Blessed _msgmacs properties don't execute with blessed permissions when they
are referenced from other MPI code.  Instead, the bless bit on _msgmacs props
indicates only that that macro is available to scripts up the environment,
even if the script's trigger is not the same as the owner of the environment
room the _msgmacs prop is on.
~
~
@unbless
@UNBLESS <obj>=<proppattern>
  
  This is a wizard-only command.
  
  Unblesses all properties on <obj> that match the given <proppattern>
wildcard pattern.  The wildcard pattern works similarly to how the examine
patterns work.  Ie:

~~code
  @unbless obj=/**      unblesses ALL properties on obj.
  @unbless obj=foo/**   unblesses all props in the foo/ propdir, and all
                         propdirs under the foo/ propdir, recursively.
  @unbless obj=foo*bar  unblesses all root props whose name start with foo
                         and end with bar.
~~endcode

  The @unbless command will list all properties that it unblesses.

  Blessed properties can execute MPI code with elevated permissions, allowing
scripts that can alter remote objects, and those objects not controlled by
the trigger owner.  Blessed MPI can also use {force} on anyone.

  Blessed _msgmacs properties don't execute with blessed permissions when they
are referenced from other MPI code.  Instead, the bless bit on _msgmacs props
indicates only that that macro is available to scripts up the environment,
even if the script's trigger is not the same as the owner of the environment
room the _msgmacs prop is on.
~
~
@wall
@WALL <message>

  Only wizards may use this command. Shouts something to every
player connected. Must be typed in full.
~
~
@usage
@USAGE

  A Wizard only command that gives system resource usage stats for the
muck server process.
~
~
@dump
@DUMP [filename]

  Only wizards may use this command. Saves the database from memory to disk.
Automatically occurs every three hours, and when @shutdown is used. It does
slow down the server, so only use if you fear a server crash is iminent.
If a filename is given, it will save the db to that file, and save any
subsequent dumps to it as well.
~
~
@delta|@dlt
@DLT
@DELTA

  Requests a short delta dump of the database to disk.  Only changed
objects are written out in a delta dump.  The @delta command does NOT
guarantee that only a delta dump will be performed, though.  If too many
changed objects exist, a full dump of the database will be made instead.
~~alsosee @dump
~
~
@shutdown
@SHUTDOWN

  Only wizards may use this command. Shuts down the game.  Must be typed
in full.
~
~
@restart
@RESTART

  Initiated a full shutdown and restart of the Muck server.
~~alsosee @shutdown
~
~
cheatsheet
Muck Basics Cheatsheet:

This is Fuzzball Muck, a user-extendible, multi-user chat system.

Basic commands:
~~code
  move/go <direction>
  get/take <thing>; drop/throw <thing>
  look; look <thing>; look <direction>
  say <message>; "<message>
  :<message> --- shows your name, with the message after it.  Used for actions.
  whisper <player> = <message>
  inventory
  news
  @describe me = <description>
  @password <oldpassword>=<newpassword>
  page <player> --- tell player that you are looking for them (cost no pennies)
  page <player> = <message> --- gives the player the message long-distance
  gripe <message> --- Complain to the management.
  home --- go home
~~endcode

For help on a specific command, type 'help <subject>'.
For a list of subjects, try 'help category', or 'help alpha'.
Remember, no matter how bad it gets, you can always go 'home' or QUIT.
~
~
costs
Costs:

  Kill: 10p (or more, up to 100p).
  @dig: 10p
  @create: 10p (or more, up to 505p)
    sacrifice value=(cost-5)/5
  @find, @owned: 100p.
  @link: 1p (if you didn't already own it, +1p to the previous owner).
  @open: 1p (2p if linked at the same time).
  
Wizards don't need money to do anything.
