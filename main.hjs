// #define METAL_IMPORT "metal"
// #define METAL_NAME "prog"
// #include "./client/client.js"
#include "mcp.hjs"

#define CONFIG_PROTO "ws"

var ws = new WebSocket(CONFIG_PROTO + "://" + window.location.hostname + ':4202', 'text');

// prog.mcp_init();
mcp_init();

var target = null;

// function console_log(ptr, len) {
//         var str = env.strout(prog.memory, ptr, len);
//         console.log(str);
// }

var dir_lbl = [ 'h', 'j', 'k', 'l', 'down', 'up' ],
        term = document.querySelector('#term'),
        form = document.querySelector('form'),
        input = document.querySelector('input'),
        modal = document.querySelector('.modal'),
        forgetbtn = document.getElementById('forget'),
        contents_btns = document.getElementById('contents'),
        rtitle = document.querySelector('#title'),
        rdesc = document.querySelector('#description'),
        map = document.querySelector('#map'),
        dir_btns = dir_lbl.map(function(id) {
		return document.querySelector('#dir #' + id);
	}),
        act = document.getElementById('act'),
        target_lbl = act.children[0];

function actions_reset() {
        act.style.display = 'none';
        target = null;
}

function cmd(str) {
	console.log("CMD", str);
        ws.send(str + "\n");
        actions_reset();
}

var nop_opacity = 0.2;

dir_btns.forEach(function(el) {
        el.onclick = cmd.bind(null, el.id);
        el.style.opacity = nop_opacity;
});

var username = localStorage.getItem('username');
var password = localStorage.getItem('password');

function login() {
	// localStorage.setItem('username', username);
	// localStorage.setItem('password', password);
        console.log('login', 'c ' + username + '=' + password + "\n");
        ws.send('c ' + username + '=' + password + "\n");
        forgetbtn.style.display = 'inline-block';
}

function forget() {
        localStorage.removeItem('username');
        localStorage.removeItem('password');
        location.reload();
}

forgetbtn.onclick = forget;

ws.binaryType = 'arraybuffer';

ws.onopen = function () {
        if (username && password) {
                login();
                help_hide();
        }
};

function scroll_reset() {
        term.scrollTop = term.scrollHeight;
}

function help_show() {
        modal.classList.add("f");
        modal.classList.remove("dn");
}

function help_hide() {
        modal.classList.add("dn");
        modal.classList.remove("f");
}

function output(stuff) {
        // term.append(stuff);
        term.innerHTML += stuff;
        scroll_reset();
}

ws.onclose = function () {
        output("Socket connection closed\n");
        // input.disabled = true;
        forgetbtn.style.display = 'none';
};

if (!username)
        promptUsername();

var actionable = {};

#include "canvas.hjs"
#include "tty.hjs"

function dir_init(mask) {
        for (var i = 0; i < dir_lbl.length; i++)
                dir_btns[i].style.opacity
                        = (mask & 1 << i) ? 1 : nop_opacity;
}

function mcp_handler(j) {
	console.log('mcp_handler', j);
        if (j.key == 'inband')
                output(tty_proc(j.data));
                // output(j.data);
        if (j.key == "com-qnixsoft-web-auth-error")
                forget();
        else if (j.key == "com-qnixsoft-web-view") {
		// var b64 = j.data;
		// TODO improve strin or make specific mapping
		// env.strin(mcp.memory, mcp.view_input(), b64, mcp.view_buf_l);
		// mcp.view_build();
                const tp = tty_proc(j.data);
                console.log("map", tp);
                // map.innerHTML = tty_proc(j.data);
                map.innerHTML = tp;
	} else if (j.key == "com-qnixsoft-web-art")
                output('<img class="ah" src="' + j.src + '">');
        else if (j.key == "com-qnixsoft-web-look-content") {
                actionable[j.name] = j;
                var className = "";
                var str = tty_proc(j.icon);
                var idx = str.indexOf("\"");

                if (idx >= 0) {
                        str = str.substr(idx + 1);
                        idx = str.indexOf("\"");
                        if (idx >= 0) {
                                className = str.substr(0, idx);
                                idx = str.indexOf(">");
                                if (idx >= 0) {
                                        str = str.substr(idx + 1, str.indexOf("<") - idx - 1);
                                }
                        }
                }

                var a = document.createElement("a");
                a.onclick = actions_init.bind(null, j.name);
                var icon = document.createElement("span");
                icon.innerHTML = str;
                icon.className = className;
                a.appendChild(icon);
                a.innerHTML += " " + j.pname;
                contents_btns.appendChild(a);
        } else if (j.key == "com-qnixsoft-web-look") {
                if (j.room) {
                        rtitle.innerHTML = j.name;
                        rdesc.innerHTML = j.description;
                        contents_btns.innerHTML = '';
                        dir_init(j.exits);
                        actionable = {};
                }
        } else if (j.key == "com-qnixsoft-web-meme") {
                var a = document.createElement("a");
                output("\n" + j.who + " says:\n");
                a.href = j.url;
                var img = document.createElement("img");
                img.src = j.url;
                img.alt = j.url;
                img.onload = scroll_reset;
                a.appendChild(img);
                term.appendChild(a);
                output("\n");
        }
}

var BUFSIZE = 156000;

ws.onmessage = function (e) {
        console.log("inserted", e.data);
        // env.strin(prog.memory, prog.mcp_input(), e.data, BUFSIZE);
        // var ptr = prog.mcp_proc();
        const str = mcp_proc(e.data);

        if (!str) {
                console.log('waiting');
		return;
        }

        // var cachestr = env.strout(prog.memory, prog.mcp_cache(), 2048);
        // console.log("cache", cachestr);

// 	if (!ptr) {
//                 console.log('waiting');
// 		return;
// 	}

	// var str = env.strout(prog.memory, ptr, BUFSIZE);
	var jsons = null;

	try {
		jsons = JSON.parse(str);
		console.log("output", str);
	} catch (e) {
		console.log(str);
		console.error(e);
	}

	if (jsons)
		for (var i = 0; i < jsons.length; i++)
			mcp_handler(jsons[i]);

	prog.mcp_reset();
};

var cmd_str = "";

input.onchange = function (e) {
	cmd_str = e.target.value;
};

function input_send(e) {
        if (input.value.match("http")) {
                var url = cmd_str.substr(cmd_str.indexOf("h"));
                cmd_str = "meme " + url; 
        }
        cmd(cmd_str);
        input.blur();
        input.value = "";
        return false;
};

function gotPassword() {
        password = input.value;
        input.type = 'text';
        input.placeholder = input.value = "";

        login();
        form.onsubmit = input_send;
        return false;
}

function gotUsername() {
        username = input.value;
        input.value = "";
        input.placeholder = input.type = 'password';
        form.onsubmit = gotPassword;
        output("Thanks. What would your password be?\n");
        return false;
}

function focus() {
        input.focus();
        scroll_reset();
}

function promptUsername() {
        input.placeholder = "username";
        focus();
        form.onsubmit = gotUsername;
        output("Please insert username to login/register\n");
        return false;
}

if (username) {
        forgetbtn.style.display = 'inline-block';
        form.onsubmit = input_send;
} else {
        forgetbtn.style.display = 'none';
        form.onsubmit = gotUsername;
}

window.onkeydown = function(e) {
	// console.log('onkeydown', e.keyCode, e);
        help_hide();

        if (document.activeElement == input) {
                switch (e.keyCode) {
                        case 27:
                                input.blur();
                }
                return;
        }

        switch (e.keyCode) {
                case 83:
                        input.value = "say ";
                        focus();
                        e.preventDefault();
                        break;
		case 65: // "a":
                        focus();
                        e.preventDefault();
                        break;
		case 75:
		case 38: // "ArrowUp":
			if (e.shiftKey)
				cmd("K");
			else
				cmd("k");
                        break;
		case 74:
		case 49: // "ArrowDown":
			if (e.shiftKey)
				cmd("J");
			else
				cmd("j");
                        break;
		case 72:
		case 37: // "ArrowLeft":
			cmd("h");
                        break;
		case 76:
		case 39: // "ArrowRight":
			cmd("l");
                        break;
        }
};

window.onorientationchange = scroll_reset;
