#include "mcp.hjs"
#include "canvas.hjs"
#include "tty.hjs"

#define CONFIG_PROTO "ws"

let ws = null;
let here, target;

function ws_init() {
        ws = new WebSocket(CONFIG_PROTO + "://" + window.location.hostname + ':4201', 'text');
        ws.binaryType = 'arraybuffer';
        ws.onopen = function () {
                if (username && password) {
                        login();
                        help_hide();
                }
        };
        ws.onclose = function () {
                output("\nSocket connection closed");
                // input.disabled = true;
                forgetbtn.style.display = 'none';
        };
        ws.onmessage = function (e) {
                // console.log("input", e.data);
                mcp_proc(e.data);
        };
}

let room_target = null;
let target_target = null;

const dir_lbl = [ 'h', 'j', 'k', 'l', 'down', 'up' ],
        term = document.querySelector('#term'),
        form = document.querySelector('form'),
        input = document.querySelector('input'),
        modal = document.querySelector('.modal'),
        forgetbtn = document.getElementById('forget_btn'),
        contents_btns = document.getElementById('contents'),
        target_div = document.getElementById('target'),
        target_title = document.getElementById('target_title'),
        target_description = document.getElementById('target_description'),
        target_contents = document.getElementById('target_contents'),
        target_art = document.getElementById('target_art'),
        rtitle = document.querySelector('#title'),
        rdesc = document.querySelector('#description'),
        map = document.querySelector('#map'),
        dir_btns = dir_lbl.map(function(id) {
		return document.querySelector('#dir #' + id);
	}),
        act = document.getElementById('act'),
        inventory_btn = document.getElementById('inventory_btn'),
        target_lbl = act.children[0];

let contents = {};

let connected = 0;

function actions_reset() {
	act.style.display = 'none';
	room_target = null;
}

function cmd(str) {
	console.log("CMD", str);
	ws.send(str + "\n");
	actions_reset();
}

let nop_opacity = 0.2;
let op_opacity = 0.7;

dir_btns.forEach(function(el) {
        el.onclick = cmd.bind(null, el.id);
        el.style.opacity = nop_opacity;
});

let username = localStorage.getItem('username');
let password = localStorage.getItem('password');

function login() {
	localStorage.setItem('username', username);
	localStorage.setItem('password', password);
	ws.send('auth ' + username + '=' + password + "\n");
	forgetbtn.style.display = 'inline-block';
        connected = 1;
}

function forget() {
	localStorage.removeItem('username');
	localStorage.removeItem('password');
        promptUsername();
}

function disconnect() {
        forget();
	location.reload();
        ws.close();
        ws_init();
};

function scroll_reset() {
	term.scrollTop = term.scrollHeight;
}

function help_show() {
	modal.classList.add("f");
	modal.classList.remove("dn");
}

function help_hide() {
	modal.classList.add("dn");
	modal.classList.remove("f");
}

modal.addEventListener("click", function (evt) {
        help_hide();
});

function output(stuff) {
	// term.append(stuff);
	term.innerHTML += stuff;
	scroll_reset();
}

if (!username)
	promptUsername();

let actionable = {},
    properties = {};

function dir_init(mask) {
	for (let i = 0; i < dir_lbl.length; i++)
		dir_btns[i].style.opacity
			= (mask & 1 << i) ? op_opacity : nop_opacity;
}

function renderActionable(dbref, j) {
	let a = document.createElement("a");
        const loc = parseInt(j.loc);
        if (loc == here)
                a.onclick = actions_init.bind(null, dbref);
        else if (loc == me)
                a.onclick = actions_me_init.bind(null, dbref);
        else
                a.onclick = actions_other_init.bind(null, dbref);
	let icon = null;
	if (j.avatar) {
		icon = document.createElement("img");
		icon.src = "art/" + j.avatar;
                icon.classList.add("s_xl", "svxl");
	} else {
                let str = j.icon ? tty_proc(j.icon) : "?";
		icon = document.createElement("span");
		icon.innerHTML = str;
		icon.className = "sxl txl tcv";
	}
	a.appendChild(icon);
	let span = document.createElement("span");
	span.innerHTML = tty_proc(j.pname);
	a.appendChild(span);
	a.className = "f fic pxs _s";
        contents[loc].appendChild(a);
}

function target_null() {
        delete actionable[target];
        contents[target].innerHTML = "";
        target_art.src = "";
        target_div.classList.add("dn");
        target = null;
}

function mcp_handler(j) {
	console.log('mcp_handler', j, actionable);
	if (j.key == 'inband') {
		if (j.data != "\n\r")
			output(tty_proc(j.data));
	} else if (j.key == "web-auth-fail")
		forget();
        else if (j.key == "web-auth-success")
		me = parseInt(j.player);
	else if (j.key == "web-view") {
		map.innerHTML = tty_proc(j.data);
	} else if (j.key == "web-art") {
                let img = document.createElement("img");
                img.className = "ah sk_f";
                img.src = "art/" + j.src;
                img.addEventListener("load", function () {
                        scroll_reset();
                });
                output('\n');
                term.appendChild(img);
                // output('\n<img class="ah sk_f" src="art/' + j.src + '">');
        } else if (j.key == "web-look-content") {
		const dbref = parseInt(j.dbref);
                const loc = parseInt(j.loc);
		actionable[loc][dbref] = j;
		renderActionable(dbref, j);
	} else if (j.key == "web-look") {
                const dbref = parseInt(j.dbref);
		if (j.room) {
                        if (here)
                                delete actionable[here];
                        here = dbref;
                        contents[here] = contents_btns;
			rtitle.innerHTML = j.name;
			rdesc.innerHTML = j.description;
			dir_init(j.exits);
                        if (target)
                                target_null();
		} else {
                        if (target)
                                delete actionable[target];
                        target_div.classList.remove("dn");
                        target = dbref;
                        contents[target] = target_contents;
                        if (j.art)
                                target_art.src = "art/" + j.art;
                        else
                                target_art.src = "";
                        target_title.innerHTML = j.pname;
                        target_description.innerHTML = j.description;
                }
                contents[dbref].innerHTML = '';
                actionable[dbref] = {};
                properties[dbref] = j;
	} else if (j.key == "web-meme") {
		let a = document.createElement("a");
		output("\n" + j.who + " says:\n");
		a.href = j.url;
		let img = document.createElement("img");
		img.src = j.url;
		img.alt = j.url;
		img.onload = scroll_reset;
		a.appendChild(img);
		term.appendChild(a);
		output("\n");
	} else if (j.key == "web-out") {
		const dbref = parseInt(j.dbref);
                const loc = parseInt(j.loc);
                if (!actionable[loc])
                        return;
                delete actionable[loc][dbref];
                contents[loc].innerHTML = '';
                console.log('web-out', dbref, loc, target, contents[loc]);
                if (dbref == target) {
                        contents[target].innerHTML = "";
                        target_art.src = "";
                        target_div.classList.add("dn");
                        target = null;
                }

                for (key in actionable[loc]) {
                        const dbref = key;
                        const j = actionable[loc][key];
                        renderActionable(dbref, j);
                }
	} else if (j.key == "web-in") {
		const dbref = parseInt(j.dbref);
                const loc = parseInt(j.loc);
                if (actionable[loc]) {
                        actionable[loc][dbref] = j;
                        renderActionable(dbref, j);
                } else {
                        console.warn("web-in: actionable of loc", loc, "is not available");
                }
	}
}

let BUFSIZE = 156000;

let cmd_str = "";

input.onchange = function (e) {
	cmd_str = e.target.value;
};

function input_send(e) {
	if (input.value.match("http")) {
		let url = cmd_str.substr(cmd_str.indexOf("h"));
		cmd_str = "meme " + url; 
	}
	cmd(cmd_str);
	input.blur();
	input.value = "";
	return false;
};

function gotPassword() {
	password = input.value;
	input.type = 'text';
	input.placeholder = input.value = "";

	login();
	form.onsubmit = input_send;
	input.blur();
	return false;
}

function gotUsername() {
	username = input.value;
	input.value = "";
	input.placeholder = input.type = 'password';
	form.onsubmit = gotPassword;
	output("\nThanks. What would your password be?");
	return false;
}

function focus() {
	input.focus();
	scroll_reset();
}

function promptUsername() {
	input.placeholder = "username";
	focus();
	form.onsubmit = gotUsername;
	output("\nPlease insert username to login/register");
	return false;
}

if (username) {
	forgetbtn.style.display = 'inline-block';
	form.onsubmit = input_send;
} else {
	forgetbtn.style.display = 'none';
	form.onsubmit = gotUsername;
}

let cmd_history = [];
let history_position = -1;

window.onkeydown = function(e) {
	console.log('onkeydown', e.keyCode, e);
	help_hide();

	if (document.activeElement == input) {
		switch (e.keyCode) {
			case 27:
				input.blur();
                                break;
                        case 85: // u
                                if (e.ctrlKey)
                                        input.value = "";
                                break;
                        case 38: // "ArrowUp":
                                input.value = cmd_history[history_position];
                                e.preventDefault();
                                history_position --;
                                if (history_position < 0)
                                        history_position = cmd_history.length - 1;
                                return false;
                        case 40: // "ArrowDown":
                                history_position ++;
                                if (history_position >= cmd_history.length)
                                        history_position = 0;
                                input.value = cmd_history[history_position];
                                e.preventDefault();
                                return false;
                        case 13: // Enter
                                cmd_history.push(input.value);
                                history_position = cmd_history.length - 1;
                                break;
		}
		return;
	}

	switch (e.keyCode) {
		case 83:
			input.value = "say ";
			focus();
			e.preventDefault();
			break;
		case 65: // "a":
			focus();
			e.preventDefault();
			break;
		case 75:
		case 38: // "ArrowUp":
			if (e.shiftKey)
				cmd("K");
			else
				cmd("k");
			break;
		case 74:
		// case 49: // "ArrowDown":
		case 40: // "ArrowDown":
			if (e.shiftKey)
				cmd("J");
			else
				cmd("j");
			break;
		case 72:
		case 37: // "ArrowLeft":
			cmd("h");
			break;
		case 76:
		case 39: // "ArrowRight":
			cmd("l");
			break;
                case 73: // i
                        inventory();
                        break;
	}
};

window.onorientationchange = scroll_reset;

function inventory() {
        if (target == me)
                target_null();
        else
                cmd("inventory");
}

ws_init();
mcp_init();

